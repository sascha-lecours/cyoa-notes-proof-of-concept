diff --git a/node_modules/libinkle/index.js b/node_modules/libinkle/index.js
index df96c83..638b226 100644
--- a/node_modules/libinkle/index.js
+++ b/node_modules/libinkle/index.js
@@ -20,6 +20,7 @@ var storyModel = function (string, inkle) {
     this.inkle = inkle;
     this.story = JSON.parse(string);
     this.stitches = this.story.data.stitches;
+    this.lastActiveStitch = null;
     /**
      * A simple object to access the critical story informations
      */
@@ -63,6 +64,19 @@ var stitchModel = function (stitch, name, inkle) {
         if (_.isString(value)) {
             this.message = value;
         } 
+        // If the text should be shown only if a condition is met
+        else if (_.has(value, 'ifCondition')) {
+                if (flagList.indexOf(value['ifCondition']) == -1) {
+                    this.message = ''; 
+                }
+        } 
+        // If the text should be shown only if a condition is NOT met
+        else if (_.has(value, 'notIfCondition')) {
+            if (flagList.indexOf(value['notIfCondition']) !== -1) {
+                this.message = '';
+            }
+        }
+        
         // is it a divert
         else if (_.has(value, 'divert')) {
             this.divert = value.divert;
@@ -114,6 +128,9 @@ var stitchModel = function (stitch, name, inkle) {
     this.getText = function () {
         return this.message;
     };
+    this.getName = function () {
+        return this.name;
+    }
     this.getChoices = function () {
         return this.choices;
     };
@@ -128,10 +145,11 @@ var stitchModel = function (stitch, name, inkle) {
  * @class
  */
 inkle = function (options) {
-    _.assign(this, options);
     this.flagList = [];
+    _.assign(this, options); // Can be used to force certain flagLists
     this.paragraphList = null;
     this.choicesList = null;
+    this.lastActiveStitch = null;
     var story = this.story || null;
     if (_.has(this, 'source')) {
         this.story = new storyModel(this.source, this);
@@ -167,7 +185,8 @@ inkle.prototype.stats = function (story) {
  * @param {string} stitch_name  A stitch key  
  * @returns {Boolean}
  */
-inkle.prototype.start = function (stitch_name) {
+inkle.prototype.start = function (stitch_name, flagList) {
+    if (flagList) this.flagList = flagList; // Allows you to start  with certain flags pre-set.
     stitch_name = stitch_name || this.story.stats.initial;
     const initial = this.story.getStitch(stitch_name);
     this.currentStitches = this.getAllStitches(initial);
@@ -186,8 +205,10 @@ inkle.prototype.getAllStitches = function (currentStitch) {
     this.paragraphList = [];
     this.choicesList = [];
     var nextStitch = '';
+    this.lastActiveStitch = '';
     while (final === false && choice === false) {
         this.paragraphList.push(currentStitch.getText());
+        this.lastActiveStitch = currentStitch;
         if (currentStitch.isChoice()) {
             choice = true;
             this.choicesList = currentStitch.getChoices();
@@ -195,7 +216,7 @@ inkle.prototype.getAllStitches = function (currentStitch) {
             final = true;
         } else {
             nextStitch = currentStitch.nextStitch();
-            currentStitch = this.story.getStitch(nextStitch)
+            currentStitch = this.story.getStitch(nextStitch);
         }
     }
     return true;
@@ -270,5 +291,14 @@ inkle.prototype.isFinished = function () {
     return this.getChoicesByName().length === 0;
 };
 
+// Custom addition: get name of last active stitch
+inkle.prototype.getCurrentStitchName = function () {
+    return this.lastActiveStitch.getName(); 
+}
+
+// Custom addition: get flaglist array at current time
+inkle.prototype.getFlagList = function () {
+    return this.flagList;
+};
 
 module.exports = inkle;
